import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, BufferedInputFile, CallbackQuery, InputMediaPhoto, InlineKeyboardButton, \
    InlineKeyboardMarkup, KeyboardButtonRequestChat
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re

from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter
import uuid
import os
import aiomysql
import asyncio
import logging
import cv2
import subprocess

from dotenv import load_dotenv
from PicImageSearch import Network, Yandex
from PicImageSearch.model import YandexResponse
from anime_parsers_ru import ShikimoriParserAsync
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

parser = ShikimoriParserAsync()

load_dotenv()

BOT_TOKEN = os.getenv("ANIME_BOT")
ADMIN_ID = os.getenv("ADMIN_ID")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
BOT_NAME = "–ê–Ω–∏–º–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"

DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "port": int(os.getenv("DB_PORT", 3306)),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "db": "anime",
}


class AdminStates(StatesGroup):
    waiting_for_contact_message = State()

class AnimeSearchStates(StatesGroup):
    waiting_for_anime_name = State()

class CancelTypes(StatesGroup):
    CANCEL_ANIME_SEARCH = "cancel_type:anime_search"
    CANCEL_ADMIN_MESSAGE = "cancel_type:no_send_admin"


async def create_pool():
    return await aiomysql.create_pool(**DB_CONFIG)


async def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    async with await create_pool() as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        user_id BIGINT PRIMARY KEY,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                await conn.commit()


async def register_user(user_id: int, username: str, first_name: str, last_name: str):
    async with await create_pool() as pool:
        async with pool.acquire() as conn:
            async with conn.cursor() as cursor:
                await cursor.execute(
                    "INSERT INTO users (user_id, username, first_name, last_name) "
                    "VALUES (%s, %s, %s, %s) ON DUPLICATE KEY UPDATE "
                    "username = VALUES(username), first_name = VALUES(first_name), last_name = VALUES(last_name)",
                    (user_id, username, first_name, last_name)
                )
                await conn.commit()


def share_bot():
    markup = InlineKeyboardBuilder()
    markup.button(
        text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —á–∞—Ç–µ üöÄ",
        switch_inline_query=" ‚Äì –±–æ—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É"
    )
    markup.button(
        text="–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å üí∞",
        url="https://yoomoney.ru/to/410018587631465"
    )
    markup.adjust(1)
    return markup.as_markup()


def actions_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å", callback_data="donate", url="https://yoomoney.ru/to/410018587631465")
    builder.button(
        text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º",
        callback_data="contact_admin"
    )
    builder.adjust(1)
    return builder.as_markup()




@dp.message(Command("start"))
async def cmd_start(message: Message):
    await register_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {BOT_NAME}!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç/—Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –≤ —Ç–∏–∫—Ç–æ–∫, —é—Ç—É–± —à–æ—Ä—Ç—Å –∏ —è –ø–æ–∫–∞–∂—É –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è.\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /anime"
    )

    pinned_msg = await message.answer(
        "–ù–µ –∑–∞–±—ã–≤–∞–π –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å —Å—é–¥–∞ üëá",
        reply_markup=actions_keyboard()
    )

    try:
        chat = await bot.get_chat(message.chat.id)
        if chat.pinned_message:
            await bot.unpin_chat_message(message.chat.id)
        await bot.pin_chat_message(
            chat_id=message.chat.id,
            message_id=pinned_msg.message_id,
            disable_notification=True
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


async def process_image(file_path: str) -> YandexResponse:
    try:
        async with Network() as client:
            yandex = Yandex(client=client)
            resp = await yandex.search(file=file_path)
            return resp
    except Exception as e:
        logger.error(f"Error in Yandex search: {e}")
        return None


def create_pagination_keyboard(search_url: str, current_page: int, total_pages: int):
    builder = InlineKeyboardBuilder()

    if total_pages > 1:
        if current_page > 1:
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{current_page - 1}")
        if current_page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{current_page + 1}")

    builder.button(text="üîç –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", url=search_url)

    builder.adjust(2, 1)
    return builder.as_markup()


async def send_result_page(message: Message, resp: YandexResponse, page: int = 1, items_per_page: int = 3,
                           edit_message_id: int = None):
    if not resp or not resp.raw:
        if edit_message_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=edit_message_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç."
                )
            except:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return

    total_results = len(resp.raw)
    total_pages = (total_results + items_per_page - 1) // items_per_page
    page = max(1, min(page, total_pages))

    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, total_results)

    media_group = []
    results_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"

    for i, result in enumerate(resp.raw[start_idx:end_idx], start=start_idx + 1):
        if result.title:
            title_parts = re.split(r'[-‚Äì‚Äî]', result.title)
            clean_title = title_parts[0].strip()
            original_title = result.title.strip()
        else:
            clean_title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            original_title = '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'

        results_text += (
            f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç #{i}</b>\n"
            f"–û—Ä–∏–≥–∏–Ω–∞–ª: <code>{original_title}</code>\n"
            f"–ß–∏—Å—Ç–æ–µ: <code>{clean_title}</code>\n"
            f"üîó <a href='{result.url}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>\n\n"
        )

        if result.thumbnail:
            media_group.append(InputMediaPhoto(
                media=result.thumbnail,
                caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç #{i} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
                parse_mode=ParseMode.HTML
            ))

    results_text += "\n\n<blockquote><b>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ–º\n–î–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∏–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /anime</b></blockquote>"

    try:
        if len(media_group) > 1:
            if edit_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        text=results_text,
                        reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
                        disable_web_page_preview=True
                    )
                except:
                    edit_message_id = None

            if not edit_message_id:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                    await asyncio.sleep(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
                    await message.answer_media_group(media_group)
                    msg = await message.answer(
                        results_text,
                        reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
                        disable_web_page_preview=True
                    )
                    return msg.message_id
                except TelegramRetryAfter as e:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—è
                    retry_after = e.retry_after
                    await message.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_after)
                    return await send_result_page(message, resp, page, items_per_page, edit_message_id)

        elif media_group:
            if edit_message_id:
                try:
                    await message.bot.edit_message_media(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        media=InputMediaPhoto(
                            media=media_group[0].media,
                            caption=results_text,
                            parse_mode=ParseMode.HTML
                        ),
                        reply_markup=create_pagination_keyboard(resp.url, page, total_pages)
                    )
                    return edit_message_id
                except:
                    edit_message_id = None

            if not edit_message_id:
                try:
                    msg = await message.answer_photo(
                        photo=media_group[0].media,
                        caption=results_text,
                        reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
                        parse_mode=ParseMode.HTML
                    )
                    return msg.message_id
                except TelegramRetryAfter as e:
                    retry_after = e.retry_after
                    await message.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_after)
                    return await send_result_page(message, resp, page, items_per_page, edit_message_id)

        else:
            if edit_message_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        text=results_text,
                        reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
                        disable_web_page_preview=True
                    )
                    return edit_message_id
                except:
                    edit_message_id = None

            if not edit_message_id:
                try:
                    msg = await message.answer(
                        results_text,
                        reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
                        disable_web_page_preview=True
                    )
                    return msg.message_id
                except TelegramRetryAfter as e:
                    retry_after = e.retry_after
                    await message.answer(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {retry_after} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(retry_after)
                    return await send_result_page(message, resp, page, items_per_page, edit_message_id)

    except Exception as e:
        logger.error(f"Error sending results: {e}")
        if edit_message_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=edit_message_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:\n\n" + results_text,
                    reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
                    disable_web_page_preview=True
                )
                return edit_message_id
            except:
                pass

        msg = await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í–æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è:\n\n" + results_text,
            reply_markup=create_pagination_keyboard(resp.url, page, total_pages),
            disable_web_page_preview=True
        )
        return msg.message_id





@dp.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AnimeSearchStates.waiting_for_anime_name:
        await callback.answer("–ó–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–æ–π —É —Å–æ–æ–±—â–µ–Ω–∏—è", show_alert=True)
        return

    page = int(callback.data.split("_")[1])
    data = await state.get_data()
    resp = data.get("yandex_response")
    last_message_id = data.get("last_message_id")

    if resp:
        new_message_id = await send_result_page(
            callback.message,
            resp,
            page,
            edit_message_id=last_message_id
        )

        if new_message_id and new_message_id != last_message_id:
            await state.update_data(last_message_id=new_message_id)

    await callback.answer()



@dp.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await message.answer("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    temp_image_path = None
    try:
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        temp_image_path = f"temp/photo_{uuid.uuid4()}.jpg"
        await bot.download_file(file_path, temp_image_path)

        resp = await process_image(temp_image_path)

        if resp:
            await state.update_data(yandex_response=resp)
            await send_result_page(message, resp)

            await message.answer(
                "‚ù§ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç?\n\n–ü–æ–¥–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã–º ü§ó",
                reply_markup=share_bot()
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç.")

    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
    finally:
        if temp_image_path and os.path.exists(temp_image_path):
            os.remove(temp_image_path)


async def download_youtube_shorts(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç YouTube Shorts —á–µ—Ä–µ–∑ VPN –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        video_path = f"temp/youtube_shorts_{uuid.uuid4()}.mp4"

        command = [
            "yt-dlp",
            "--proxy", "socks5://127.0.0.1:10808",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–æ–∫—Å–∏, —á—Ç–æ –∏ –¥–ª—è TikTok
            "-f", "best",
            "-o", video_path,
            url
        ]

        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        _, stderr = await process.communicate()

        if process.returncode != 0:
            logger.error(f"yt-dlp error for YouTube Shorts: {stderr.decode()}")
            return None

        return video_path if os.path.exists(video_path) else None
    except Exception as e:
        logger.error(f"Error downloading YouTube Shorts: {e}")
        return None

async def download_tiktok_video(url: str) -> None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å TikTok —á–µ—Ä–µ–∑ VPN –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        video_path = f"temp/tiktok_{uuid.uuid4()}.mp4"

        command = [
            "yt-dlp",
            "--proxy", "socks5://127.0.0.1:10808",
            "-f", "best",
            "-o", video_path,
            url
        ]

        process = await asyncio.create_subprocess_exec(
            *command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        _, stderr = await process.communicate()

        if process.returncode != 0:
            logger.error(f"yt-dlp error: {stderr.decode()}")
            return None

        return video_path if os.path.exists(video_path) else None
    except Exception as e:
        logger.error(f"Error downloading TikTok video: {e}")
        return None


async def extract_first_frame(video_path: str, max_attempts: int = 10) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π –∫–∞–¥—Ä"""
    try:
        cap = cv2.VideoCapture(video_path)

        for i in range(max_attempts):
            ret, frame = cap.read()
            if not ret:
                break

            if cv2.mean(frame)[0] > 10:
                image_path = f"temp/frame_{uuid.uuid4()}.jpg"
                cv2.imwrite(image_path, frame)
                cap.release()
                return image_path

        cap.release()
        return None
    except Exception as e:
        logger.error(f"Frame extraction error: {e}")
        return None


@dp.message(F.text.contains("youtube.com/shorts/") | F.text.contains("youtu.be/"))
async def handle_youtube_shorts(message: Message, state: FSMContext):
    await message.answer("–°–∫–∞—á–∏–≤–∞—é...")

    video_path = None
    frame_path = None

    try:
        video_path = await download_youtube_shorts(message.text)
        if not video_path:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            return

        await message.answer("–ò–∑–≤–ª–µ–∫–∞—é –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä...")

        frame_path = await extract_first_frame(video_path)
        if not frame_path:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ.")
            return

        resp = await process_image(frame_path)
        if resp:
            await state.update_data(yandex_response=resp)
            await send_result_page(message, resp)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ.")

    except Exception as e:
        logger.error(f"Error processing YouTube Shorts: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if video_path and os.path.exists(video_path):
            os.remove(video_path)
        if frame_path and os.path.exists(frame_path):
            os.remove(frame_path)

@dp.message(F.text.contains("tiktok.com"))
async def handle_tiktok_url(message: Message, state: FSMContext):
    await message.answer("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏–∑ TikTok...")

    video_path = None
    frame_path = None

    try:
        video_path = await download_tiktok_video(message.text)
        if not video_path:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            return

        await message.answer("–ò–∑–≤–ª–µ–∫–∞—é –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä...")

        frame_path = await extract_first_frame(video_path)
        if not frame_path:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ.")
            return

        resp = await process_image(frame_path)
        if resp:
            await state.update_data(yandex_response=resp)
            await send_result_page(message, resp)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ.")

    except Exception as e:
        logger.error(f"Error processing TikTok: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if video_path and os.path.exists(video_path):
            os.remove(video_path)
        if frame_path and os.path.exists(frame_path):
            os.remove(frame_path)


@dp.message(Command("anime"))
async def cmd_anime_search(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ –Ω–∞ Shikimori"""
    args = message.text.split(maxsplit=1)
    if len(args) > 1:
        await search_anime_info(message, args[1])
    else:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞",
            callback_data=CancelTypes.CANCEL_ANIME_SEARCH
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(AnimeSearchStates.waiting_for_anime_name)


@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=actions_keyboard())

@dp.callback_query(F.data.startswith("cancel_type:"))
async def process_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        cancel_type = callback.data.split(":")[1]

        if cancel_type == "anime_search":
            current_state = await state.get_state()
            if current_state == AnimeSearchStates.waiting_for_anime_name:
                await state.set_state(None)
                await callback.message.edit_text("üîç –ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ –æ—Ç–º–µ–Ω—ë–Ω")

        elif cancel_type == "no_send_admin":
            current_state = await state.get_state()
            if current_state == AdminStates.waiting_for_contact_message:
                await state.set_state(None)
                await callback.message.edit_text("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –æ—Ç–º–µ–Ω–µ–Ω–∞")

        await callback.answer()

    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)
    except Exception as e:
        logger.error(f"Cancel error: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(AnimeSearchStates.waiting_for_anime_name)
async def process_anime_name(message: Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
    await state.set_data({**await state.get_data(), **{
        "state": None,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        "last_anime_search": message.text  # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }})
    await search_anime_info(message, message.text, state)


async def search_anime_info(message: Message, anime_name: str, state: FSMContext):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ –Ω–∞ Shikimori"""
    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∏–º–µ '{anime_name}'...")

    try:
        search_results = await parser.search(anime_name)
        if not search_results:
            await message.answer(f"‚ùå –ê–Ω–∏–º–µ '{anime_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        anime_data = search_results[0]
        detailed_info = await parser.anime_info(anime_data['link'])

        message_parts = [
            f"üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {anime_data['title']}",
            f"üîπ <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {anime_data['original_title']}",
        ]

        if detailed_info:
            if detailed_info.get('type'):
                message_parts.append(f"üì∫ <b>–¢–∏–ø:</b> {detailed_info['type']}")
            if detailed_info.get('dates'):
                message_parts.append(f"üìÖ <b>–î–∞—Ç—ã –≤—ã—Ö–æ–¥–∞:</b> {detailed_info['dates']}")
            if detailed_info.get('status'):
                message_parts.append(f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {detailed_info['status']}")
            if detailed_info.get('episodes'):
                message_parts.append(f"üéûÔ∏è <b>–≠–ø–∏–∑–æ–¥—ã:</b> {detailed_info['episodes']}")
            if detailed_info.get('episode_duration'):
                message_parts.append(f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {detailed_info['episode_duration']}")
            if detailed_info.get('studio'):
                message_parts.append(f"üè¢ <b>–°—Ç—É–¥–∏—è:</b> {detailed_info['studio']}")
            if detailed_info.get('genres'):
                message_parts.append(f"üè∑Ô∏è <b>–ñ–∞–Ω—Ä—ã:</b> {', '.join(detailed_info['genres'])}")
            if detailed_info.get('themes'):
                message_parts.append(f"üé≠ <b>–¢–µ–º—ã:</b> {', '.join(detailed_info['themes'])}")
            if detailed_info.get('score'):
                message_parts.append(f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {detailed_info['score']}")
            if detailed_info.get('rating'):
                message_parts.append(f"üîû <b>–†–µ–π—Ç–∏–Ω–≥:</b> {detailed_info['rating']}")

        message_parts.append(f"\nüîó <a href='{anime_data['link']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ Shikimori</a>")

        poster_url = detailed_info.get('picture') if detailed_info else anime_data.get('poster')
        if poster_url:
            try:
                await message.answer_photo(
                    photo=poster_url,
                    caption="\n".join(message_parts)
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–µ—Ä: {e}")
                await message.answer("\n".join(message_parts))
        else:
            await message.answer("\n".join(message_parts))

        if detailed_info and detailed_info.get('description'):
            description = detailed_info['description']
            if len(description) > 1000:
                description = description[:1000] + "..."
            await message.answer(f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}")

    except Exception as e:
        logger.error(f"Error searching anime: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∏–º–µ: {e}")
    finally:
        current_state = await state.get_state()
        if current_state == AnimeSearchStates.waiting_for_anime_name:
            await state.set_state(None)

        await message.answer(
            "‚ù§ –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç?\n\n–ü–æ–¥–µ–ª–∏—Å—å –∏–º —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã–º ü§ó",
            reply_markup=share_bot()
        )



@dp.callback_query(F.data == "contact_admin")
async def contact_admin_callback(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å",
        callback_data=CancelTypes.CANCEL_ADMIN_MESSAGE
    )
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º):",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.waiting_for_contact_message)
    await callback.answer()


@dp.message(AdminStates.waiting_for_contact_message)
async def process_contact_message(message: Message, state: FSMContext):
    admin_id = int(ADMIN_ID)

    text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{message.from_user.id}</code> (@{message.from_user.username}):\n"

    if message.text:
        text += message.text
        text += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π /answer userid —Ç–µ–∫—Å—Ç - –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
        await bot.send_message(admin_id, text)
    elif message.photo:
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        temp_image_path = f"temp/contact_{uuid.uuid4()}.jpg"
        await bot.download_file(file_path, temp_image_path)

        with open(temp_image_path, "rb") as photo_file:
            await bot.send_photo(
                admin_id,
                BufferedInputFile(photo_file.read(), filename="contact.jpg"),
                caption=text + (f"\n\n{message.caption}" if message.caption else "\n[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]") +
                        "\n\n–ò—Å–ø–æ–ª—å–∑—É–π /answer userid —Ç–µ–∫—Å—Ç - –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
            )
        os.remove(temp_image_path)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        return

    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É!")
    await state.clear()


@dp.message(Command("answer"))
async def admin_answer(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        return

    try:
        _, user_id, *answer_text = message.text.split()
        answer_text = " ".join(answer_text)
        await message.bot.send_message(int(user_id), f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n{answer_text}")
        await message.answer(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except (ValueError, IndexError) as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /answer user_id —Ç–µ–∫—Å—Ç")
    except (TelegramForbiddenError, TelegramBadRequest) as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@dp.message(Command("sendall"))
async def send_to_all_users(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –ë–î"""
    if str(message.from_user.id) != ADMIN_ID:
        return

    try:
        sendtext = " ".join(message.text.split()[1:])
        if not sendtext:
            await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /sendall —Ç–µ–∫—Å—Ç")
            return

        await message.answer(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        async with await create_pool() as pool:
            async with pool.acquire() as conn:
                async with conn.cursor() as cursor:
                    await cursor.execute("SELECT user_id FROM users")
                    users = await cursor.fetchall()

        total_users = len(users)
        success = 0
        failed = 0
        failed_ids = []

        for user in users:
            user_id = user[0]
            try:
                await asyncio.sleep(1)
                await bot.send_message(user_id, sendtext)
                success += 1
            except (TelegramForbiddenError, TelegramBadRequest) as e:
                failed += 1
                failed_ids.append(str(user_id))
                if "bot was blocked" in str(e).lower():
                    async with await create_pool() as pool:
                        async with pool.acquire() as conn:
                            async with conn.cursor() as cursor:
                                await cursor.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
                                await conn.commit()

        report = (
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
        )

        if failed_ids:
            report += f"\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è ID: {', '.join(failed_ids[:10])}"
            if len(failed_ids) > 10:
                report += f" –∏ –µ—â—ë {len(failed_ids) - 10}..."

        await message.answer(report)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    if not os.path.exists("temp"):
        os.makedirs("temp")

    asyncio.run(main())